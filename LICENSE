### backend/tests/test_query.py
```py
from fastapi.testclient import TestClient
from backend.api.app import app
import pytest

client = TestClient(app)

@pytest.fixture(scope="module")
def setup_documents(monkeypatch):
    # Mock embedding and vector store
    monkeypatch.setattr(
        'backend.embeddings.embedder.get_embedding',
        lambda text: [0.0]*1536
    )
    monkeypatch.setattr(
        'backend.embeddings.vector_store.query',
        lambda vector: {'matches': [{'id': 'clause1'}, {'id': 'clause2'}]}
    )
    # Mock OpenAI
    class DummyResponse:
        choices = [type('c', (), {'message': type('m', (), {'content': '{"age":46,"procedure":"knee surgery","location":"Pune","policy_duration":3}'})})]
    monkeypatch.setattr(
        'openai.ChatCompletion.create',
        lambda model, messages: DummyResponse()
    )

def test_query_approval(setup_documents):
    payload = {"query": "46M, knee surgery, Pune, 3-month policy"}
    response = client.post('/query', json=payload)
    assert response.status_code == 200
    data = response.json()
    assert data['decision'] == 'approved'
    assert data['amount'] == 100000
    assert len(data['justification']) == 2